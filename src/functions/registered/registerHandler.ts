import { Iregister } from "./interface";
import createWallet from "../create/createWallet";
import encryptPrivateKey from "../encrypt/encryptPrivateKey";
import saveUser from "../save/saveUser";
import sendMessage from "../send/sendMessage";
import isUserRegistered from "./isUserRegistered";

const registerHandler: Iregister = async (msg) => {
  const { chat, from } = msg;
  const username = from?.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

  if (await isUserRegistered(chat.id)) {
    return sendMessage(chat.id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üöÄ");
  }

  try {
    const result = await createWallet();
    if (!result) throw new Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞.");

    const { privateKey, address } = result;
    const encryptedPrivateKey = encryptPrivateKey(privateKey);

    await saveUser({ chat, username, address, encryptedPrivateKey });
    sendMessage(chat.id, `–¢–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –±—ã–ª —Å–æ–∑–¥–∞–Ω: ${address.base58}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:", error);
    sendMessage(chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
  }
};

export default registerHandler;
